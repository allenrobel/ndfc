##############################################
##            REQUIRED VARS                 ##
##############################################
# fabric_1
#
# - A VXLAN_EVPN fabric
#
# No switches are required
#
##############################################

##############################################
##                 SETUP                    ##
##############################################

- name: SETUP.0a - REPLACED - [with_items] print vars
  ansible.builtin.debug:
    var: item
  with_items:
     - "fabric_1 : {{ fabric_1 }}"

- name: SETUP.0b - REPLACED - [with_items] log vars
  cisco.nd.nd_log:
    msg: "{{ item }}"
  with_items:
     - "fabric_1 : {{ fabric_1 }}"

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "SETUP.1 - REPLACED - [dcnm_rest.GET] Verify if fabric is deployed."

- name: Log task
  cisco.nd.nd_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/{{ fabric_1 }}"
  register: result

- assert:
    that:
    - result.response.DATA != None

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "SETUP.2 - REPLACED - [deleted] Delete all VRFs."

- name: Log task
  cisco.nd.nd_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.nd.nd_vrf:
    fabric: "{{ fabric_1 }}"
    state: deleted

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "SETUP.4 - REPLACED - [merged] Create, VLAN+VRF vrf1."

- name: Log task
  cisco.nd.nd_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.nd.nd_vrf:
    fabric: "{{ fabric_1 }}"
    state: merged
    config:
    - vrf_name: vrf1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
  register: result_setup_4

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "SETUP.4a - REPLACED - [query] Wait for vrfStatus == NA."

- name: Log task
  cisco.nd.nd_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.nd.nd_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: result_setup_4a
  until:
    - "result_setup_4a.response[0].DATA.vrfStatus is search('NA')"
  retries: 30
  delay: 2

- name: SETUP.4b - REPLACED - [debug] print result_setup_4
  ansible.builtin.debug:
    var: result_setup_4

- name: SETUP.4c - REPLACED - [debug] print result_setup_4
  debug:
    var: result_setup_4

- assert:
    that:
    - result_setup_4.changed == true
    - result_setup_4.diff[0].vrf_name == "vrf1"
    - result_setup_4.response[0].RETURN_CODE == 200

###############################################
###                REPLACED                  ##
###############################################

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1 - REPLACED - [replaced] Update existing VRF using replace (change vlan)."

- name: Log task
  cisco.nd.nd_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.nd.nd_vrf: &conf1
    fabric: "{{ fabric_1 }}"
    state: replaced
    config:
    - vrf_name: vrf1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 600
  register: result_1

- name: TEST.1a - REPLACED - [query] Wait for vrfStatus == NA
  cisco.nd.nd_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: result_1a
  until:
    - "result_1a.response[0].DATA.vrfStatus is search('NA')"
  retries: 30
  delay: 2

- name: TEST.1b - REPLACED - [debug] print result_1
  debug:
    var: result_1

- assert:
    that:
    - result_1.changed == true
    - result_1.diff[0].vrf_name == "vrf1"
    - result_1.response[0].RETURN_CODE == 200
    - result_1.response[1].RETURN_CODE == 200

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1c - REPLACED - conf1 - Idempotence."

- name: Log task
  cisco.nd.nd_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.nd.nd_vrf: *conf1
  register: result_1c

- name: TEST.1d - REPLACED - [debug] print result_1c
  debug:
    var: result_1c

- assert:
    that:
    - result_1c.changed == false

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.2 - REPLACED - [replaced] Update existing VRF using replace (change vrf_id and vlan_id)."

- name: Log task
  cisco.nd.nd_log:
    msg: "{{ task_name }}"

- name: "{{ task_name}}"
  cisco.nd.nd_vrf: &conf2
    fabric: "{{ fabric_1 }}"
    state: replaced
    config:
    - vrf_name: vrf1
      vrf_id: 9008033
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 700
  register: result_2

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.2a - REPLACED - [query] Wait for vrfStatus == NA."

- name: Log task
  cisco.nd.nd_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.nd.nd_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: result_2a
  until:
    - "result_2a.response[0].DATA.vrfStatus is search('NA')"
  retries: 30
  delay: 2
  ignore_errors: true

- name: DEBUG register result_2a
  debug:
    var: result_2a

- name: TEST.2b - REPLACED - [debug] print result_2
  debug:
    var: result_2

- assert:
    that:
    - result_2.changed == true
    - result_2.response[0].vrf_name == "vrf1"
    - result_2.response[0].vlan_id == 700
    - result_2.response[0].vrf_id == 9008033
    - result_2.response[0].RETURN_CODE == 200
    - result_2.response[1].RETURN_CODE == 200
    - (result_2.response[0].DATA|dict2items)[0].value == "SUCCESS"
    - (result_2.response[0].DATA|dict2items)[1].value == "SUCCESS"

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.2c - REPLACED - [replaced] conf2 - Idempotence."

- name: Log task
  cisco.nd.nd_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.nd.nd_vrf: *conf2
  register: result_2c

- name: TEST.2d - REPLACED - [debug] print result_2c
  debug:
    var: result_2c

- assert:
    that:
    - result_2c.changed == false

###############################################
###                 CLEAN-UP                 ##
###############################################

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "CLEANUP.1 - REPLACED - [deleted] Delete all VRFs."

- name: Log task
  cisco.nd.nd_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.nd.nd_vrf:
    fabric: "{{ fabric_1 }}"
    state: deleted

