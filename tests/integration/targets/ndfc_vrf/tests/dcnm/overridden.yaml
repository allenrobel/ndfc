##############################################
##            REQUIRED VARS                 ##
##############################################
# fabric_1
#
# - A VXLAN_EVPN fabric
#
# No switches are required
#
##############################################

##############################################

##############################################
##                 SETUP                    ##
##############################################

- name: SETUP.0 - OVERRIDDEN - print vars
  ansible.builtin.debug:
    var: item
  with_items:
     - "fabric_1 : {{ fabric_1 }}"

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "SETUP.1 - OVERRIDDEN - [dcnn_rest.GET] Verify if fabric is deployed."

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/{{ fabric_1 }}"
  register: result

- assert:
    that:
    - result.response.DATA != None

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "SETUP.2 - OVERRIDDEN - [deleted] Delete all VRFs"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf:
    fabric: "{{ fabric_1 }}"
    state: deleted
  register: result_setup_2


- name: Set task name
  ansible.builtin.set_fact:
    task_name: "SETUP.3 OVERRIDDEN - [merged] Create VRF vrf1"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf:
    fabric: "{{ fabric_1 }}"
    state: merged
    config:
    - vrf_name: vrf1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
  register: result_setup_3

- name: SETUP.3a - OVERRIDDEN - [debug] print result_setup_3
  debug:
    var: result_setup_3

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "SETUP.4 OVERRIDDEN - [query] Wait for vrfStatus == NA"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: result_setup_4
  until:
    - "result_setup_4.response[0].DATA.vrfStatus is search('NA')"
  retries: 30
  delay: 2

- assert:
    that:
    - result_setup_3.changed == true
    - result_setup_3.diff[0].vrf_name == "vrf1"
    - result_setup_3.response[0].RETURN_CODE == 200
    - result_setup_3.response[1].RETURN_CODE == 200
    - result_setup_3.response[2].RETURN_CODE == 200

###############################################
###              OVERRIDDEN                  ##
###############################################
- name: Set fact
  ansible.builtin.set_fact:
    DEPLOYMENT_OF_VRFS: "Deployment of VRF(s) has been initiated successfully"

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1 - OVERRIDDEN - [overridden] Override existing VRF vrf1 to create new VRF vrf2"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf: &conf1
    fabric: "{{ fabric_1 }}"
    state: overridden
    config:
    - vrf_name: vrf2
      vrf_id: 9008012
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
  register: result_1

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1a - OVERRIDDEN - [query] Wait for vrfStatus == NA"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: result_1a
  until:
    - "result_1a.response[0].DATA.vrfStatus is search('NA')"
  retries: 30
  delay: 2

- name: TEST.1b - OVERRIDDEN - [debug] print result_1
  debug:
    var: result_1

- assert:
    that:
    - result_1.changed == true
    - result_1.diff[0].vrf_name == "vrf2"
    - result_1.diff[1].vrf_name == "vrf1"
    - result_1.response[0].METHOD == "POST"
    - result_1.response[1].METHOD == "POST"
    - result_1.response[2].METHOD == "DELETE"
    - result_1.response[3].METHOD == "POST"
    - result_1.response[4].METHOD == "POST"
    - result_1.response[5].METHOD == "POST"
    - result_1.response[0].RETURN_CODE == 200
    - result_1.response[1].RETURN_CODE == 200
    - result_1.response[2].RETURN_CODE == 200
    - result_1.response[3].RETURN_CODE == 200
    - result_1.response[4].RETURN_CODE == 200
    - result_1.response[5].RETURN_CODE == 200
    - result_1.response[1].DATA.status == DEPLOYMENT_OF_VRFS
    - result_1.response[5].DATA.status == DEPLOYMENT_OF_VRFS

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1c - OVERRIDDEN - [overridden] conf1 - Idempotence"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf: *conf1
  register: result_1c

- name: TEST.1d - OVERRIDDEN - [debug] print result_1c
  debug:
    var: result_1c

- assert:
    that:
    - result_1c.changed == false
    - result_1c.response|length == 0

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1f - OVERRIDDEN - [deleted] Delete all VRFs"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf:
    fabric: "{{ fabric_1 }}"
    state: deleted
  register: result_1f

- name: TEST.1g - OVERRIDDEN - [wait_for] Wait 60 seconds for controller and switch to sync
  wait_for:
    timeout: 60
  when: result_1f.changed == true

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.2 - OVERRIDDEN - [merged] Create VRF vrf2"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf:
    fabric: "{{ fabric_1 }}"
    state: merged
    config:
    - vrf_name: vrf2
      vrf_id: 9008012
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 1500
  register: result_2


- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.2b - OVERRIDDEN - [query] Wait for vrfStatus == NA"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: result_2b
  until:
    - "result_2b.response[0].DATA.vrfStatus is search('NA')"
  retries: 30
  delay: 2

- name: TEST.2c - OVERRIDDEN - [debug] print result_2
  debug:
    var: result_2

- assert:
    that:
    - result_2.changed == true
    - result_2.diff[0].vrf_name == "vrf2"
    - result_2.response[0].RETURN_CODE == 200
    - result_2.response[1].RETURN_CODE == 200
    - result_2.response[2].RETURN_CODE == 200
    - result_2.response[2].DATA.status == DEPLOYMENT_OF_VRFS

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.3 - OVERRIDDEN - [overridden] Override VRF vrf2"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf: &conf3
    fabric: "{{ fabric_1 }}"
    state: overridden
    config:
    - vrf_name: vrf2
      vrf_id: 9008012
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 1500
  register: result_3



- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.3d - OVERRIDDEN - [query] Wait for vrfStatus == NA"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: result_3d
  until:
    - "result_3d.response[0].DATA.vrfStatus is search('NA')"
  retries: 30
  delay: 2

- name: TEST.3e - OVERRIDDEN - [debug] print result_3
  debug:
    var: result_3

- assert:
    that:
    - result_3.changed == true
    - result_3.diff[0].vrf_name == "vrf2"
    - result_3.response[0].RETURN_CODE == 200
    - result_3.response[1].RETURN_CODE == 200
    - result_3.response[1].DATA.status == DEPLOYMENT_OF_VRFS

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.3f - OVERRIDDEN - [overridden] conf2 - Idempotence"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf: *conf3
  register: result_3f

- name: TEST.3g - OVERRIDDEN - [debug] print result_3f
  debug:
    var: result_3f

- assert:
    that:
    - result_3f.changed == false
    - result_3f.response|length == 0

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.4 - OVERRIDDEN - [overridden] Override vrf2 to create vrf1"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf: &conf4
    fabric: "{{ fabric_1 }}"
    state: overridden
    config:
    - vrf_name: vrf1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vlan_id: 500
  register: result_4


- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.4b - OVERRIDDEN - [query] Wait for vrfStatus == NA"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: result_4b
  until:
    - "result_4b.response[0].DATA.vrfStatus is search('NA')"
  retries: 30
  delay: 2

- name: TEST.4c - OVERRIDDEN - [debug] print result_4
  debug:
    var: result_4

- assert:
    that:
    - result_4.changed == true
    - result_4.diff[0].vrf_name == "vrf1"
    - result_4.diff[1].vrf_name == "vrf2"
    - result_4.response[0].METHOD == "POST"
    - result_4.response[1].METHOD == "POST"
    - result_4.response[2].METHOD == "DELETE"
    - result_4.response[3].METHOD == "POST"
    - result_4.response[4].METHOD == "POST"
    - result_4.response[5].METHOD == "POST"
    - result_4.response[0].RETURN_CODE == 200
    - result_4.response[1].RETURN_CODE == 200
    - result_4.response[2].RETURN_CODE == 200
    - result_4.response[3].RETURN_CODE == 200
    - result_4.response[4].RETURN_CODE == 200
    - result_4.response[5].RETURN_CODE == 200
    - result_4.response[1].DATA.status == DEPLOYMENT_OF_VRFS
    - result_4.response[5].DATA.status == DEPLOYMENT_OF_VRFS

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.4d - OVERRIDDEN - [overridden] conf3 - Idempotence"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf: *conf4
  register: result_4d

- name: TEST.4e - OVERRIDDEN - [debug] print result_4d
  debug:
    var: result_4d

- assert:
    that:
    - result_4d.changed == false
    - result_4d.response|length == 0

##############################################
##                 CLEAN-UP                 ##
##############################################

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "CLEANUP.1 - OVERRIDDEN - [deleted] Delete all VRFs"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.ndfc.ndfc_vrf:
    fabric: "{{ fabric_1 }}"
    state: deleted

