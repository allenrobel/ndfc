##############################################
##            REQUIRED VARS                 ##
##############################################
# fabric_1
# A VXLAN_EVPN fabric
#
# switch_1
#
# - A vrf-lite capable switch
# - Does not require an interface.
#
# switch_2
#
# - A vrf-lite capable switch
#
# switch_3
#
# A NON-vrf-lite capable switch
#
# interface_2a
#
# - Ethernet interface on switch_2
# - Used to test VRF LITE configuration.
#
# interface_3a
#
# - Ethernet interface on switch_3
# - Used to verify error when applying a
#   VRF LITE extension on a non-vrf-lite
#   capable switch.
##############################################

##############################################
##                 SETUP                    ##
##############################################

- set_fact:
    rest_path: "/rest/control/fabrics/{{ fabric_1 }}"
  when: controller_version == "11"

- set_fact:
    rest_path: "/appcenter/cisco/ndfc/api/v1/lan-fabric/rest/control/fabrics/{{ fabric_1 }}"
  when: controller_version >= "12"

- name: SETUP.0 - MERGED - [with_items] print vars
  ansible.builtin.debug:
    var: item
  with_items:
     - "fabric_1 : {{ fabric_1 }}"
     - "switch_1 : {{ switch_1 }}"
     - "switch_2 : {{ switch_2 }}"
     - "switch_3 : {{ switch_3 }}"
     - "interface_2a : {{ interface_2a }}"
     - "interface_3a : {{ interface_3a }}"

- name: SETUP.1 - MERGED - [dcnm_rest.GET] Verify fabric is deployed.
  cisco.dcnm.dcnm_rest:
    method: GET
    path: "{{ rest_path }}"
  register: result

- assert:
    that:
    - result.response.DATA != None

- name: SETUP.2 - MERGED - [deleted] Delete all VRFs in fabric_1
  cisco.nd.nd_vrf:
    state: deleted
    config:
    - fabric: "{{ fabric_1 }}"
  register: result_setup_2

- name: SETUP.2a - MERGED - [wait_for] Wait 60 seconds for controller and switch to sync
  # The vrf lite profile removal returns ok for deployment, but the switch
  # takes time to remove the profile so wait for some time before creating
  # a new vrf, else the switch goes into OUT-OF-SYNC state
  wait_for:
    timeout: 60
  when: result_setup_2.changed == true

###############################################
###                MERGED                    ##
###############################################

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1 - MERGED - [merged] Create VRF vrf1"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  register: result_1_nd_vrf
  cisco.nd.nd_vrf:
    state: merged
    config:
    - fabric: "{{ fabric_1 }}"
      vrf_name: vrf1
      vrf_id: 9008011
      vrf_template: Default_VRF_Universal
      vrf_extension_template: Default_VRF_Extension_Universal
      vrf_template_config:
        vrf_segment_id: 9008011
        vrf_vlan_id: 1500
        mtu: 9216
        vrf_description: "VRF for merged integration test"
        asn: "65001"
        tag: 12346

- name: Set fact
  ansible.builtin.set_fact:
    DEPLOYMENT_OF_VRFS: "Deployment of VRF(s) has been initiated successfully"

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1 - MERGED - [merged] Attach vrf_1 to switch_2 with lite config"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  register: result_1
  cisco.nd.nd_vrf_attachments: &conf1
    state: merged
    config:
      - fabric: "{{ fabric_1 }}"
        vrf_name: "{{ vrf_1 }}"
        lan_attach_list:
          - ip_address: "{{ switch_2 }}"
            vlan_id: 100
            deployment: true
            extension_values:
              vrf_lite_conn:
                vrf_lite_conn:
                  - dot1q_id: "2"
                    if_name: "{{ interface_2a }}"
                    ip_mask: "10.33.0.2/30"
                    ipv6_mask: "2010::10:34:0:7/64"
                    ipv6_neighbor: "2010::10:34:0:3"
                    neighbor_asn: "65002"
                    neighbor_ip: "10.33.0.1"
                    peer_vrf_name: "{{ vrf_1 }}"

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1a - MERGED - [query] Wait for vrfStatus == DEPLOYED"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.nd.nd_vrf:
    fabric: "{{ fabric_1 }}"
    state: query
  register: result_1a
  until:
    - "result_1a.response[0].vrfStatus is search('DEPLOYED')"
  retries: 30
  delay: 2

- name: TEST.1b - MERGED - [debug] print result_1
  ansible.builtin.debug:
    var: result_1

- assert:
    that:
    - result_1.changed == true
    - result_1.diff[0].attach[0].deploy == true
    - result_1.diff[0].attach[1].deploy == true
    - result_1.diff[0].vrf_name == "ansible-vrf-int1"
    - result_1.response[2].DATA.status == DEPLOYMENT_OF_VRFS
    - result_1.response[0].METHOD == "POST"
    - result_1.response[1].METHOD == "POST"
    - result_1.response[2].METHOD == "POST"
    - result_1.response[0].RETURN_CODE == 200
    - result_1.response[1].RETURN_CODE == 200
    - result_1.response[2].RETURN_CODE == 200
    - (result_1.response[1].DATA|dict2items)[0].value == "SUCCESS"
    - (result_1.response[1].DATA|dict2items)[1].value == "SUCCESS"
    - switch_1 in result_1.diff[0].attach[0].ip_address
    - switch_2 in result_1.diff[0].attach[1].ip_address

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1c - MERGED - [merged] conf1 - Idempotence"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.nd.nd_vrf_attachments: *conf1
  register: result_1c

- name: TEST.1d - MERGED - [debug] print result_1c
  ansible.builtin.debug:
    var: result_1c

- assert:
    that:
    - result_1c.changed == false
    - result_1c.response|length == 0

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1e - MERGED - [deleted] Delete VRF attachments"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.nd.nd_vrf_attachments:
    state: deleted
    config:
      - fabric: "{{ fabric_1 }}"
        vrf: "{{ vrf_1 }}"
  register: result_1e

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "TEST.1e - MERGED - [deleted] Delete VRFs"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"

- name: "{{ task_name }}"
  cisco.nd.nd_vrf:
    state: deleted
    config:
      - fabric: "{{ fabric_1 }}"
  register: result_1e


###############################################
###                 CLEAN-UP                 ##
###############################################

- name: Set task name
  ansible.builtin.set_fact:
    task_name: "CLEANUP.1 - MERGED - [deleted] Delete all VRFs"

- name: Log task
  cisco.dcnm.dcnm_log:
    msg: "{{ task_name }}"


- name: "{{ task_name }}"
  cisco.nd.nd_vrf:
    state: deleted
    config:
      - fabric: "{{ fabric_1 }}"

- name: CLEANUP.2 - MERGED - [wait_for] Wait 60 seconds for controller and switch to sync
  wait_for:
    timeout: 60
